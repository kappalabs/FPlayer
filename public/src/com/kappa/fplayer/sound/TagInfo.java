
package com.kappa.fplayer.sound;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.audio.AudioHeader;
import org.jaudiotagger.audio.exceptions.CannotReadException;
import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
import org.jaudiotagger.tag.FieldKey;
import org.jaudiotagger.tag.Tag;
import org.jaudiotagger.tag.TagException;

/**
 * General structure of every Tag information processor.
 * TagElement provides simple storage for tags information,
 * header and audio info lists stores information from specific part of the
 * audio file.
 * 
 * @author Vojtech Vasek
 */
public abstract class TagInfo {
    
    /**
     * Simple storage unit for tags information.
     */
    public class TagElement {
        public String name;
        public String value;

        public TagElement(String name, String value) {
            this.name = name;
            this.value = value;
        }
    }
    
    public List<TagElement> headerInfo = new ArrayList<>();
    public List<TagElement> audioInfo = new ArrayList<>();
    
    /**
     * Load information, that every audio file should have got.
     * 
     * @param audioFile input audio file
     * @throws IOException generated by AudioFileIO.read
     * @throws CannotReadException generated by AudioFileIO.read
     * @throws TagException generated by AudioFileIO.read
     * @throws ReadOnlyFileException generated by AudioFileIO.read
     * @throws InvalidAudioFrameException generated by AudioFileIO.read
     */
    public void loadBasicInfo(File audioFile) throws IOException, CannotReadException, TagException, ReadOnlyFileException, InvalidAudioFrameException {
        AudioFile f = AudioFileIO.read(audioFile);
        AudioHeader ah = f.getAudioHeader();
        try {
            if (ah != null) {
                headerInfo.add(new TagElement("bit rate", ah.getBitRate()));
                headerInfo.add(new TagElement("channels", ah.getChannels()));
                headerInfo.add(new TagElement("format", ah.getFormat()));
                headerInfo.add(new TagElement("sample rate", ah.getSampleRate()));
            }

            Tag tag = f.getTag();
            if (tag != null) {
                audioInfo.add(new TagElement("artist", tag.getFirst(FieldKey.ARTIST)));
                audioInfo.add(new TagElement("album", tag.getFirst(FieldKey.ALBUM)));
                audioInfo.add(new TagElement("title", tag.getFirst(FieldKey.TITLE)));
                audioInfo.add(new TagElement("comment", tag.getFirst(FieldKey.COMMENT)));
                audioInfo.add(new TagElement("year", tag.getFirst(FieldKey.YEAR)));
                audioInfo.add(new TagElement("track", tag.getFirst(FieldKey.TRACK)));
                // Not every audio file has these
                audioInfo.add(new TagElement("disc no.", tag.getFirst(FieldKey.DISC_NO)));
                audioInfo.add(new TagElement("composer", tag.getFirst(FieldKey.COMPOSER)));
                audioInfo.add(new TagElement("artist sort", tag.getFirst(FieldKey.ARTIST_SORT)));
            }
        } catch (UnsupportedOperationException ex) {
            // Not retrieved information will simply not be shown
            System.err.println("TagInfo: "+ex);
        }
    }
    
    /**
     * Load data from given audio file and save it internaly.
     * 
     * @param audioFile input audio file
     */
    public abstract void loadInfo(File audioFile);
    
}
